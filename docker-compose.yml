version: "3.8"

services:
  # Base de données PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: crm_postgres_dev
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-crm_db}
      POSTGRES_USER: ${POSTGRES_USER:-crm_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-crm_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - crm_network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-crm_user} -d ${POSTGRES_DB:-crm_db}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis pour Celery et cache
  redis:
    image: redis:7-alpine
    container_name: crm_redis_dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - crm_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Application Django
  web:
    build: .
    container_name: crm_web_dev
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/app
      - media_volume:/app/media
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-crm_user}:${POSTGRES_PASSWORD:-crm_password}@postgres:5432/${POSTGRES_DB:-crm_db}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DEBUG=True
      - SECRET_KEY=${SECRET_KEY:-django-insecure-dev-key}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - crm_network

  # Celery Worker
  celery:
    build: .
    container_name: crm_celery_dev
    command: celery -A mini_crm worker -l info
    volumes:
      - .:/app
      - media_volume:/app/media
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-crm_user}:${POSTGRES_PASSWORD:-crm_password}@postgres:5432/${POSTGRES_DB:-crm_db}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DEBUG=True
      - SECRET_KEY=${SECRET_KEY:-django-insecure-dev-key}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - crm_network

  # Celery Beat (tâches planifiées)
  celery-beat:
    build: .
    container_name: crm_celery_beat_dev
    command: celery -A mini_crm beat -l info
    volumes:
      - .:/app
      - media_volume:/app/media
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-crm_user}:${POSTGRES_PASSWORD:-crm_password}@postgres:5432/${POSTGRES_DB:-crm_db}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DEBUG=True
      - SECRET_KEY=${SECRET_KEY:-django-insecure-dev-key}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - crm_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  media_volume:
    driver: local

networks:
  crm_network:
    driver: bridge
